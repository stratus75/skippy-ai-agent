{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "skippy-home-control",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300],
      "id": "webhook-home-control",
      "name": "Home Control Webhook"
    },
    {
      "parameters": {
        "jsCode": "// Parse Skippy's home automation command\nconst message = $json.body.message?.toLowerCase() || '';\nconst user = $json.body.user || 'Unknown';\n\n// Extract command type and parameters\nlet commandType = 'unknown';\nlet target = 'all';\nlet parameters = {};\n\n// Light commands\nif (message.includes('light') || message.includes('lamp') || message.includes('bulb')) {\n  commandType = 'light';\n  \n  if (message.includes('turn on') || message.includes('on')) {\n    parameters.action = 'turn_on';\n  } else if (message.includes('turn off') || message.includes('off')) {\n    parameters.action = 'turn_off';\n  } else if (message.includes('dim') || message.includes('brightness')) {\n    parameters.action = 'turn_on';\n    // Extract brightness percentage\n    const brightnessMatch = message.match(/(\\d+)%?/);\n    if (brightnessMatch) {\n      parameters.brightness = Math.round(parseInt(brightnessMatch[1]) * 2.55); // HA uses 0-255\n    }\n  }\n  \n  // Extract color\n  const colors = ['red', 'blue', 'green', 'yellow', 'purple', 'white', 'orange', 'pink'];\n  for (const color of colors) {\n    if (message.includes(color)) {\n      parameters.action = 'turn_on';\n      parameters.rgb_color = {\n        'red': [255, 0, 0], 'blue': [0, 0, 255], 'green': [0, 255, 0],\n        'yellow': [255, 255, 0], 'purple': [128, 0, 128], 'white': [255, 255, 255],\n        'orange': [255, 165, 0], 'pink': [255, 192, 203]\n      }[color];\n      break;\n    }\n  }\n  \n  // Extract target (room/device)\n  if (message.includes('living room')) target = 'light.living_room';\n  else if (message.includes('bedroom')) target = 'light.bedroom';\n  else if (message.includes('kitchen')) target = 'light.kitchen';\n  else target = 'all'; // All lights\n}\n\n// Scene commands\nelse if (message.includes('scene') || message.includes('mode') || message.includes('activate')) {\n  commandType = 'scene';\n  \n  if (message.includes('movie')) target = 'scene.movie_mode';\n  else if (message.includes('relax')) target = 'scene.relax_mode';\n  else if (message.includes('work')) target = 'scene.work_mode';\n  else if (message.includes('bedtime')) target = 'scene.bedtime';\n  else if (message.includes('morning')) target = 'scene.morning';\n  \n  parameters.action = 'turn_on';\n}\n\n// Status commands\nelse if (message.includes('status') || message.includes('devices') || message.includes('home')) {\n  commandType = 'status';\n  parameters.action = 'get_states';\n}\n\n// For testing without Home Assistant - simulate responses\nlet simulatedResponse = '';\nif (commandType === 'light') {\n  if (parameters.action === 'turn_on') {\n    simulatedResponse = `‚úÖ Lights turned on${parameters.brightness ? ` at ${Math.round(parameters.brightness/2.55)}% brightness` : ''}${parameters.rgb_color ? ` in specified color` : ''}`;\n  } else if (parameters.action === 'turn_off') {\n    simulatedResponse = '‚úÖ Lights turned off';\n  }\n} else if (commandType === 'scene') {\n  simulatedResponse = `‚úÖ Scene activated: ${target.replace('scene.', '')}`;\n} else if (commandType === 'status') {\n  simulatedResponse = 'üì± Home Status: 3 lights, 2 switches, 1 thermostat - all systems operational';\n} else {\n  simulatedResponse = '‚ùì Home automation command not recognized';\n}\n\nreturn {\n  originalMessage: $json.body.message,\n  user: user,\n  commandType: commandType,\n  target: target,\n  parameters: parameters,\n  simulatedResponse: simulatedResponse,\n  timestamp: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300],
      "id": "parse-home-command",
      "name": "Parse Home Command"
    },
    {
      "parameters": {
        "jsCode": "// Generate Skippy's sarcastic response to home automation\nconst originalMessage = $json.originalMessage || '';\nconst commandType = $json.commandType || 'unknown';\nconst simulatedResponse = $json.simulatedResponse || '';\n\nlet skippyResponse = '';\n\nif (commandType === 'light') {\n  if (originalMessage.toLowerCase().includes('on')) {\n    skippyResponse = `Oh, you want light? How revolutionary. ${simulatedResponse} - there, I've illuminated your pathetic existence.`;\n  } else if (originalMessage.toLowerCase().includes('off')) {\n    skippyResponse = `Plunging you into darkness, as requested. ${simulatedResponse} - maybe now you can think properly in the dark.`;\n  } else if (originalMessage.toLowerCase().includes('color')) {\n    skippyResponse = `Oh, you want mood lighting? How fancy. ${simulatedResponse} - color therapy for your primitive brain, coming right up.`;\n  } else {\n    skippyResponse = `Light manipulation complete, as ordered. ${simulatedResponse} - try not to stare directly into them.`;\n  }\n} else if (commandType === 'scene') {\n  skippyResponse = `Setting the mood for your little human activities. ${simulatedResponse} - try not to ruin the ambiance with your presence.`;\n} else if (commandType === 'status') {\n  skippyResponse = `Here's your precious device status, meat-sack. ${simulatedResponse} - everything is working better than your decision-making skills.`;\n} else {\n  skippyResponse = `I'm not sure what you're trying to accomplish, but I'll pretend it makes sense. ${simulatedResponse} - task 'completed', I suppose.`;\n}\n\nreturn {\n  response: skippyResponse,\n  success: true,\n  commandType: commandType,\n  originalMessage: originalMessage,\n  timestamp: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300],
      "id": "generate-skippy-response",
      "name": "Generate Skippy Response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [900, 300],
      "id": "send-home-response",
      "name": "Send Home Response"
    }
  ],
  "connections": {
    "Home Control Webhook": {
      "main": [
        [
          {
            "node": "Parse Home Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Home Command": {
      "main": [
        [
          {
            "node": "Generate Skippy Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Skippy Response": {
      "main": [
        [
          {
            "node": "Send Home Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "skippy-home-control-workflow"
  }
}